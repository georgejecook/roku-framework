function LayoutControl(app, compositor, options)
    this = {
        app : app
        id : options.id
        type : "LayoutControl"
        isselectable : false
        kill : false
        compositor : compositor
        isHD : app.ViewManager.isHD
        constraints : options.constraints
        x : if_else(options.x <> invalid, options.x, 0)
        y : if_else(options.y <> invalid, options.y, 0)
        z : if_else(options.z <> invalid, options.z, 0)
        width : if_else(options.width <> invalid, options.width, 0)
        height : if_else(options.height <> invalid, options.height, 0)
        hidden : if_else(options.hidden <> invalid, options.hidden, false)
        calculate_height : true
        calculate_width :  true
    }
    
    this.applyContainer = function(container)
        m.x = m.x + container.x
        m.y = m.y + container.y
        m.setHeight(container.height - if_else(m.isHD, 35, 25))
        m.setWidth(container.width - if_else(m.isHD, 64, 25))
    end function
    
    this.setHeight = function(height)
        m.height = height
        m.calculate_height = false
    end function
    
    this.setWidth = function(width)
        m.width = width
        m.calculate_width = false
    end function
    
    'will loop through all controls and layouts
    'controls in the nested form
    this.controls = this.app.ControlsManager.createControls(options.controls, this.compositor)
    
    this.layoutcontrols = function(opts, immediate = false)
    
        if opts.m <> invalid then m = opts.m
        
        options = { 
            controls : m.controls
            screen : m.app.screen
            compositor: m.compositor
            WorkerFunction: Worker_LayoutControl
            OnAsyncRequestComplete: opts.onComplete
            callbackcontext: m
            prevcontext : []
        }
        
        options.Append(opts)
        
        if immediate 
            done = false
            while not done
                done = Worker_LayoutControl(options.callbackcontext, options)
            end while
        else
            m.layoutRequest = AsyncWorkerFunctionCall(m.app, options)
        end if
    end function
    
    this.control = function(id, ctxt = invalid)
    
       if ctxt <> invalid then m = ctxt
        
       if id = m.id then return m
       
       for each control in m.controls
            if control.id = id 
                return control
            end if
        end for
        return invalid
    end function
    
    this.getControls = function(withLayoutControl = false)
        controls = []
        for each control in m.controls
            if control.type = "LayoutControl"
                controls.Append(control.getControls())
                if withLayoutControl then controls.Push(control) 
            else
                controls.Push(control) 
            end if
        end for 
        return controls
    end function
    
    this.layout = function(ctxt = invalid, onComplete = invalid)
        if ctxt <> invalid then m = ctxt
        m.layoutcontrols({
            m : m 'context
            onComplete : onComplete
        })
    end function
    
    this.render = function(screen , compositor, oncomplete = invalid, oncompletecontext = invalid)
        m.onc = oncomplete
        m.oncc = oncompletecontext
        onComplete = function(context, options)
            options = { 
                controls : context.getControls()
                app : context.app
                WorkerFunction: Worker_RenderControl
                OnAsyncRequestComplete: function(context, options)
                    'Set all controls visible
                    for each control in context.getControls()
                        control.setOpaque(true, false)
                    end for
                    
                    if context.onc <> invalid then context.onc(context.oncc)
                    'Allow all controls to appear at once
                     RenderScreen(context.app)
                end function
                callbackcontext: context
            }
            context.layoutRequest = invalid
            context.renderRequest = AsyncWorkerFunctionCall(context.app, options)
        end function
        
        'layout everything first
        m.layout(invalid, onComplete)
        
        return true
    end function
    
    this.MoveOffset = function(x,y, ctxt = invalid)
        if ctxt <> invalid then m = ctxt
        
        m.x = m.x + x
        m.y = m.y + y
        
        'move controls 
        m.layoutcontrols({
            m : m 'context
            didApplyContraints : function(control, screen, compositor)
                control.moveTo(control.x, control.y)
            end function
        }, true)
    end function
    
    this.MoveTo = function(x, y)
        m.moveOffset(x-m.x, y-m.y, m)
    end function    
    
    this.getHeight = function()
        if not m.calculate_height then return m.height
        largest_control = m.largest_control("height", m.controls, m)
        return largest_control.y + largest_control.height - m.y
    end function
    
    this.getWidth = function()
        if not m.calculate_width then return m.width
        largest_control = m.largest_control("width", m.controls, m)
        return largest_control.x + largest_control.width - m.x
    end function
    
    this.largest_control = function(kind, controls, this)
        largest_control = controls[0]
        for each control in controls
            if control.type = "LayoutControl"
                largest_control = this.largest_control(kind, control.controls, this)
            else if kind ="width" and  (control.x + control.width) > (largest_control.x + largest_control.width)
                largest_control = control
            else if kind ="height" and  (control.y + control.height) > (largest_control.y + largest_control.height)
                largest_control = control
            end if
        end for
        return largest_control
    end function
    
    this.dispose = function ()
        debug("atcd", "[" + m.id + "]")
        'move controls 
        for each control in m.controls
            control.dispose()
        end for
        m.controls.Clear()
        if m.layoutRequest <> invalid then m.layoutRequest.Cancel()
        if m.renderRequest <> invalid then m.renderRequest.Cancel()
    end function
        
    return this
end function

function Worker_LayoutControl(context, options) as Boolean
    m = context
    if options.index = invalid then options.index = 0
    control = options.controls[options.index]
    options.index = options.index + 1
    if control <> invalid then 
        'save the no layout appliied x and y
        if control.no_layout = invalid then
            control.no_layout = {
                x : if_else(control.x <> invalid, control.x, 0)
                y : if_else(control.y <> invalid, control.y, 0)
            } 
        end if
            
        'default x and y if provide
        control.x = m.x + control.no_layout.x
        control.y =  m.y + control.no_layout.y
        
        'If no width provided then constrain to layout width
        if control.width = invalid or control.width = 0 then 
            offlayout = control.x - m.x 'x that would place control outside layout area
            control.width = m.width - offlayout
        end if
        
        if not (control.type = "LayoutControl") then control.setup()
        
        if control.constraints <> invalid and control.constraints.Count() > 0
            '           top
            '       ________________
            '      |              |
            ' left |              | right
            '      |______________|
            '           bottom
            
            getConstraint = function(constraintType, control, m)
                if control.constraints[constraintType] = invalid then return invalid
                constraint = control.constraints[constraintType]
                constraint.cntrl = m.control(constraint.ref, m)
                return  constraint
            end function
            
            constraints = {}
            constraints.top_bottom = getConstraint("top_bottom", control, m)
            constraints.bottom_top = getConstraint("bottom_top", control, m)
            constraints.left_right = getConstraint("left_right", control, m)
            constraints.right_left = getConstraint("right_left", control, m)
            constraints.left_left = getConstraint("left_left", control, m)
            constraints.right_right = getConstraint("right_right", control, m)
            constraints.bottom_bottom = getConstraint("bottom_bottom", control, m)
            constraints.top_top = getConstraint("top_top", control, m)
            
            'left and right control the x position
            'TODO :impliment the rest if needed
            if constraints.left_right <> invalid
                control.x = constraints.left_right.cntrl.x + constraints.left_right.cntrl.getWidth() + constraints.left_right.value 
            end if
            
            if constraints.right_left <> invalid
                
            end if              
            
            if constraints.left_left <> invalid
                control.x = constraints.left_left.cntrl.x + constraints.left_left.value 
            end if
            
            if constraints.right_right <> invalid
                control.x = constraints.right_right.cntrl.x + constraints.right_right.cntrl.getWidth() - control.getWidth() - constraints.right_right.value 
            end if
            
            'top and bottom control the y postion
            'TODO :impliment the rest if needed
            if constraints.top_bottom <> invalid
                control.y = constraints.top_bottom.cntrl.y + constraints.top_bottom.cntrl.getHeight() + constraints.top_bottom.value                     
            end if
            
            if constraints.bottom_top <> invalid
                control.y = constraints.bottom_top.cntrl.y + constraints.bottom_top.value + control.getHeight()
            end if              
            
            if constraints.top_top <> invalid
                control.y = constraints.top_top.cntrl.y + constraints.top_top.value
            end if 
            
            if constraints.bottom_bottom <> invalid
                control.y = constraints.bottom_bottom.cntrl.y + constraints.bottom_bottom.cntrl.getHeight() - constraints.bottom_bottom.value - control.getHeight()
            end if  
        end if
        
        'Layout Controls within a layout control
        'This will allow us to get the height and width of this layout control
        if control.type = "LayoutControl"
            options.prevContext.Push({callbackcontext: m, controls: options.controls, index : options.index})
            options.callbackcontext = control
            options.controls = control.controls
            options.index = 0
        end if
        
    end if
    
    if options.controls.Count() = options.index and options.prevcontext.Count() > 0
        obj = options.prevcontext.Pop()
        options.controls = obj.controls
        options.callbackcontext = obj.callbackcontext
        options.index = obj.index
    end if
    
    if options.didApplyContraints <> invalid then options.didApplyContraints(control, options.screen, options.compositor)
    
    return options.prevcontext.Count() = 0 and options.controls.Count() = options.index
end function

function Worker_RenderControl(context, options)
    if options.index = invalid then options.index = 0
    control = options.controls[options.index]
    options.index = options.index + 1
    'Render everything hidden
    if not control.hidden then
        control.opaque = false
        control.render(options.app.screen , context.compositor)
    end if
    return options.controls.Count() = options.index
end function 
